/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGJAVA
#define SWIGJAVA
#endif



#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


    #include "../usbaudiostatic/include/AudioChannel.h"
    #include "../usbaudiostatic/include/AudioDevice.h"
    #include "../usbaudiostatic/include/AudioMode.h"
    #include "../usbaudiostatic/include/IVolumeController.h"
    #include "../usbaudiostatic/include/USBAudioDevice.h"
    #include "../usbaudiostatic/include/USBAudioManager.h"
    #include "../usbaudiostatic/include/USBSelectorUnit.h"
    #include "USBControl.h"
    #include "ToJava.h"


#include <string>


#include <typeinfo>
#include <stdexcept>


#include <vector>
#include <stdexcept>

SWIGINTERN std::vector< AudioChannel * >::const_reference std_vector_Sl_AudioChannel_Sm__Sg__get(std::vector< AudioChannel * > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_AudioChannel_Sm__Sg__set(std::vector< AudioChannel * > *self,int i,std::vector< AudioChannel * >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< int >::const_reference std_vector_Sl_int_Sg__get(std::vector< int > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_int_Sg__set(std::vector< int > *self,int i,std::vector< int >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< IVolumeController * >::const_reference std_vector_Sl_IVolumeController_Sm__Sg__get(std::vector< IVolumeController * > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_IVolumeController_Sm__Sg__set(std::vector< IVolumeController * > *self,int i,std::vector< IVolumeController * >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< USBSelectorUnit * >::const_reference std_vector_Sl_USBSelectorUnit_Sm__Sg__get(std::vector< USBSelectorUnit * > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_USBSelectorUnit_Sm__Sg__set(std::vector< USBSelectorUnit * > *self,int i,std::vector< USBSelectorUnit * >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }

#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jstring JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_AudioChannel_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  AudioChannel *arg1 = (AudioChannel *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AudioChannel **)&jarg1; 
  result = ((AudioChannel const *)arg1)->getName();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_AudioChannel_1getTracks(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  AudioChannel *arg1 = (AudioChannel *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AudioChannel **)&jarg1; 
  result = (int)((AudioChannel const *)arg1)->getTracks();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_AudioChannel_1getTrackOffset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  AudioChannel *arg1 = (AudioChannel *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AudioChannel **)&jarg1; 
  result = (int)((AudioChannel const *)arg1)->getTrackOffset();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_delete_1AudioChannel(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  AudioChannel *arg1 = (AudioChannel *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(AudioChannel **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_new_1AudioChannelVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< AudioChannel * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< AudioChannel * > *)new std::vector< AudioChannel * >();
  *(std::vector< AudioChannel * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_new_1AudioChannelVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< AudioChannel * >::size_type arg1 ;
  std::vector< AudioChannel * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< AudioChannel * >::size_type)jarg1; 
  result = (std::vector< AudioChannel * > *)new std::vector< AudioChannel * >(arg1);
  *(std::vector< AudioChannel * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_AudioChannelVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< AudioChannel * > *arg1 = (std::vector< AudioChannel * > *) 0 ;
  std::vector< AudioChannel * >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< AudioChannel * > **)&jarg1; 
  result = ((std::vector< AudioChannel * > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_AudioChannelVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< AudioChannel * > *arg1 = (std::vector< AudioChannel * > *) 0 ;
  std::vector< AudioChannel * >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< AudioChannel * > **)&jarg1; 
  result = ((std::vector< AudioChannel * > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_AudioChannelVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< AudioChannel * > *arg1 = (std::vector< AudioChannel * > *) 0 ;
  std::vector< AudioChannel * >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< AudioChannel * > **)&jarg1; 
  arg2 = (std::vector< AudioChannel * >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_AudioChannelVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< AudioChannel * > *arg1 = (std::vector< AudioChannel * > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< AudioChannel * > **)&jarg1; 
  result = (bool)((std::vector< AudioChannel * > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_AudioChannelVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< AudioChannel * > *arg1 = (std::vector< AudioChannel * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< AudioChannel * > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_AudioChannelVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< AudioChannel * > *arg1 = (std::vector< AudioChannel * > *) 0 ;
  std::vector< AudioChannel * >::value_type *arg2 = 0 ;
  std::vector< AudioChannel * >::value_type temp2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< AudioChannel * > **)&jarg1; 
  temp2 = *(std::vector< AudioChannel * >::value_type *)&jarg2;
  arg2 = (std::vector< AudioChannel * >::value_type *)&temp2; 
  (arg1)->push_back((std::vector< AudioChannel * >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_AudioChannelVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< AudioChannel * > *arg1 = (std::vector< AudioChannel * > *) 0 ;
  int arg2 ;
  std::vector< AudioChannel * >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< AudioChannel * > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< AudioChannel * >::value_type *) &std_vector_Sl_AudioChannel_Sm__Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< AudioChannel * >::value_type *)&jresult = *result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_AudioChannelVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< AudioChannel * > *arg1 = (std::vector< AudioChannel * > *) 0 ;
  int arg2 ;
  std::vector< AudioChannel * >::value_type *arg3 = 0 ;
  std::vector< AudioChannel * >::value_type temp3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< AudioChannel * > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = *(std::vector< AudioChannel * >::value_type *)&jarg3;
  arg3 = (std::vector< AudioChannel * >::value_type *)&temp3; 
  try {
    std_vector_Sl_AudioChannel_Sm__Sg__set(arg1,arg2,(AudioChannel *const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_delete_1AudioChannelVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< AudioChannel * > *arg1 = (std::vector< AudioChannel * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< AudioChannel * > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_AudioMode_1getNumberOfChannels(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  AudioMode *arg1 = (AudioMode *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AudioMode **)&jarg1; 
  result = (int)((AudioMode const *)arg1)->getNumberOfChannels();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_AudioMode_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  AudioMode *arg1 = (AudioMode *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AudioMode **)&jarg1; 
  result = ((AudioMode const *)arg1)->getName();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_AudioMode_1getNumberOfAudioChannelCombinations(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  AudioMode *arg1 = (AudioMode *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AudioMode **)&jarg1; 
  result = (int)((AudioMode const *)arg1)->getNumberOfAudioChannelCombinations();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_AudioMode_1getAudioChannelCombination(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  AudioMode *arg1 = (AudioMode *) 0 ;
  int arg2 ;
  AudioChannel *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AudioMode **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (AudioChannel *)(arg1)->getAudioChannelCombination(arg2);
  *(AudioChannel **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_AudioMode_1getIndexOfAudioChannel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  AudioMode *arg1 = (AudioMode *) 0 ;
  AudioChannel *arg2 = (AudioChannel *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(AudioMode **)&jarg1; 
  arg2 = *(AudioChannel **)&jarg2; 
  result = (int)((AudioMode const *)arg1)->getIndexOfAudioChannel((AudioChannel const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_AudioMode_1getChannels(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  AudioMode *arg1 = (AudioMode *) 0 ;
  int arg2 ;
  std::vector< AudioChannel * > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AudioMode **)&jarg1; 
  arg2 = (int)jarg2; 
  result = ((AudioMode const *)arg1)->getChannels(arg2);
  *(std::vector< AudioChannel * > **)&jresult = new std::vector< AudioChannel * >((const std::vector< AudioChannel * > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_delete_1AudioMode(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  AudioMode *arg1 = (AudioMode *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(AudioMode **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_new_1IntVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< int > *)new std::vector< int >();
  *(std::vector< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_new_1IntVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< int >::size_type arg1 ;
  std::vector< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< int >::size_type)jarg1; 
  result = (std::vector< int > *)new std::vector< int >(arg1);
  *(std::vector< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_IntVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  result = ((std::vector< int > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_IntVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  result = ((std::vector< int > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_IntVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  arg2 = (std::vector< int >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_IntVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  result = (bool)((std::vector< int > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_IntVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_IntVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::value_type *arg2 = 0 ;
  std::vector< int >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  temp2 = (std::vector< int >::value_type)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((std::vector< int >::value_type const &)*arg2);
}


SWIGEXPORT jint JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_IntVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  std::vector< int >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< int >::value_type *) &std_vector_Sl_int_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = (jint)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_IntVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  std::vector< int >::value_type *arg3 = 0 ;
  std::vector< int >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector< int >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_int_Sg__set(arg1,arg2,(int const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_delete_1IntVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< int > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_AudioDevice_1getCurrentOutputMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  AudioDevice *arg1 = (AudioDevice *) 0 ;
  AudioMode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AudioDevice **)&jarg1; 
  result = (AudioMode *)((AudioDevice const *)arg1)->getCurrentOutputMode();
  *(AudioMode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_AudioDevice_1setCurrentOutputMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  AudioDevice *arg1 = (AudioDevice *) 0 ;
  AudioMode *arg2 = (AudioMode *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(AudioDevice **)&jarg1; 
  arg2 = *(AudioMode **)&jarg2; 
  (arg1)->setCurrentOutputMode(arg2);
}


SWIGEXPORT jint JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_AudioDevice_1getNumberOfInputModes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  AudioDevice *arg1 = (AudioDevice *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AudioDevice **)&jarg1; 
  result = (int)((AudioDevice const *)arg1)->getNumberOfInputModes();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_AudioDevice_1getNumberOfOutputModes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  AudioDevice *arg1 = (AudioDevice *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AudioDevice **)&jarg1; 
  result = (int)((AudioDevice const *)arg1)->getNumberOfOutputModes();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_AudioDevice_1setLastUsedInputMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  AudioDevice *arg1 = (AudioDevice *) 0 ;
  AudioMode *arg2 = (AudioMode *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(AudioDevice **)&jarg1; 
  arg2 = *(AudioMode **)&jarg2; 
  (arg1)->setLastUsedInputMode(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_AudioDevice_1getInputMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  AudioDevice *arg1 = (AudioDevice *) 0 ;
  int arg2 ;
  AudioMode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AudioDevice **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (AudioMode *)((AudioDevice const *)arg1)->getInputMode(arg2);
  *(AudioMode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_AudioDevice_1getOutputMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  AudioDevice *arg1 = (AudioDevice *) 0 ;
  int arg2 ;
  AudioMode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AudioDevice **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (AudioMode *)((AudioDevice const *)arg1)->getOutputMode(arg2);
  *(AudioMode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_AudioDevice_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  AudioDevice *arg1 = (AudioDevice *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AudioDevice **)&jarg1; 
  result = ((AudioDevice const *)arg1)->getName();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_AudioDevice_1audioInputModeToIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  AudioDevice *arg1 = (AudioDevice *) 0 ;
  AudioMode *arg2 = (AudioMode *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(AudioDevice **)&jarg1; 
  arg2 = *(AudioMode **)&jarg2; 
  result = (int)((AudioDevice const *)arg1)->audioInputModeToIndex(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_AudioDevice_1audioOutputModeToIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  AudioDevice *arg1 = (AudioDevice *) 0 ;
  AudioMode *arg2 = (AudioMode *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(AudioDevice **)&jarg1; 
  arg2 = *(AudioMode **)&jarg2; 
  result = (int)((AudioDevice const *)arg1)->audioOutputModeToIndex(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_AudioDevice_1setSampleRate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  AudioDevice *arg1 = (AudioDevice *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AudioDevice **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->setSampleRate(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_AudioDevice_1getCurrentSampleRate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  AudioDevice *arg1 = (AudioDevice *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AudioDevice **)&jarg1; 
  result = (int)((AudioDevice const *)arg1)->getCurrentSampleRate();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_AudioDevice_1getSampleRate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  AudioDevice *arg1 = (AudioDevice *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AudioDevice **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((AudioDevice const *)arg1)->getSampleRate(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_AudioDevice_1setSampleRateByIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  AudioDevice *arg1 = (AudioDevice *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AudioDevice **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setSampleRateByIndex(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_AudioDevice_1getAvailableSampleRates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  AudioDevice *arg1 = (AudioDevice *) 0 ;
  std::vector< int > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AudioDevice **)&jarg1; 
  result = ((AudioDevice const *)arg1)->getAvailableSampleRates();
  *(std::vector< int > **)&jresult = new std::vector< int >((const std::vector< int > &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_AudioDevice_1isSampleRateAvailable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  AudioDevice *arg1 = (AudioDevice *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AudioDevice **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)((AudioDevice const *)arg1)->isSampleRateAvailable(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_AudioDevice_1setInputResolution(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  AudioDevice *arg1 = (AudioDevice *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AudioDevice **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setInputResolution(arg2);
}


SWIGEXPORT jint JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_AudioDevice_1getCurrentInputResolution(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  AudioDevice *arg1 = (AudioDevice *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AudioDevice **)&jarg1; 
  result = (int)((AudioDevice const *)arg1)->getCurrentInputResolution();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_AudioDevice_1getInputResolution(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  AudioDevice *arg1 = (AudioDevice *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AudioDevice **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((AudioDevice const *)arg1)->getInputResolution(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_AudioDevice_1setInputResolutionByIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  AudioDevice *arg1 = (AudioDevice *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AudioDevice **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setInputResolutionByIndex(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_AudioDevice_1getAvailableInputResolutions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  AudioDevice *arg1 = (AudioDevice *) 0 ;
  std::vector< int > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AudioDevice **)&jarg1; 
  result = ((AudioDevice const *)arg1)->getAvailableInputResolutions();
  *(std::vector< int > **)&jresult = new std::vector< int >((const std::vector< int > &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_AudioDevice_1isInputResolutionAvailable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  AudioDevice *arg1 = (AudioDevice *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AudioDevice **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)((AudioDevice const *)arg1)->isInputResolutionAvailable(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_AudioDevice_1setOutputResolution(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  AudioDevice *arg1 = (AudioDevice *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AudioDevice **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setOutputResolution(arg2);
}


SWIGEXPORT jint JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_AudioDevice_1getCurrentOutputResolution(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  AudioDevice *arg1 = (AudioDevice *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AudioDevice **)&jarg1; 
  result = (int)((AudioDevice const *)arg1)->getCurrentOutputResolution();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_AudioDevice_1getOutputResolution(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  AudioDevice *arg1 = (AudioDevice *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AudioDevice **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((AudioDevice const *)arg1)->getOutputResolution(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_AudioDevice_1setOutputResolutionByIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  AudioDevice *arg1 = (AudioDevice *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AudioDevice **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setOutputResolutionByIndex(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_AudioDevice_1getAvailableOutputResolutions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  AudioDevice *arg1 = (AudioDevice *) 0 ;
  std::vector< int > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AudioDevice **)&jarg1; 
  result = ((AudioDevice const *)arg1)->getAvailableOutputResolutions();
  *(std::vector< int > **)&jresult = new std::vector< int >((const std::vector< int > &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_AudioDevice_1isOutputResolutionAvailable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  AudioDevice *arg1 = (AudioDevice *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AudioDevice **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)((AudioDevice const *)arg1)->isOutputResolutionAvailable(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_AudioDevice_1getProductId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  AudioDevice *arg1 = (AudioDevice *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AudioDevice **)&jarg1; 
  result = (int)((AudioDevice const *)arg1)->getProductId();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_AudioDevice_1getVendorId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  AudioDevice *arg1 = (AudioDevice *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AudioDevice **)&jarg1; 
  result = (int)((AudioDevice const *)arg1)->getVendorId();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_AudioDevice_1getDeviceString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  AudioDevice *arg1 = (AudioDevice *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AudioDevice **)&jarg1; 
  result = ((AudioDevice const *)arg1)->getDeviceString();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_delete_1AudioDevice(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  AudioDevice *arg1 = (AudioDevice *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(AudioDevice **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_IVolumeController_1getCurrentVolume(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbooleanArray jarg2) {
  jint jresult = 0 ;
  IVolumeController *arg1 = (IVolumeController *) 0 ;
  bool *arg2 = (bool *) 0 ;
  bool temp2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IVolumeController **)&jarg1; 
  {
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return 0;
    }
    if (jenv->GetArrayLength(jarg2) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return 0;
    }
    temp2 = false;
    arg2 = &temp2; 
  }
  result = (int)((IVolumeController const *)arg1)->getCurrentVolume(arg2);
  jresult = (jint)result; 
  {
    jboolean jvalue = (jboolean)temp2;
    jenv->SetBooleanArrayRegion(jarg2, 0, 1, &jvalue);
  }
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_IVolumeController_1getMinVolume(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbooleanArray jarg2) {
  jint jresult = 0 ;
  IVolumeController *arg1 = (IVolumeController *) 0 ;
  bool *arg2 = (bool *) 0 ;
  bool temp2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IVolumeController **)&jarg1; 
  {
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return 0;
    }
    if (jenv->GetArrayLength(jarg2) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return 0;
    }
    temp2 = false;
    arg2 = &temp2; 
  }
  result = (int)((IVolumeController const *)arg1)->getMinVolume(arg2);
  jresult = (jint)result; 
  {
    jboolean jvalue = (jboolean)temp2;
    jenv->SetBooleanArrayRegion(jarg2, 0, 1, &jvalue);
  }
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_IVolumeController_1getMaxVolume(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbooleanArray jarg2) {
  jint jresult = 0 ;
  IVolumeController *arg1 = (IVolumeController *) 0 ;
  bool *arg2 = (bool *) 0 ;
  bool temp2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IVolumeController **)&jarg1; 
  {
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return 0;
    }
    if (jenv->GetArrayLength(jarg2) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return 0;
    }
    temp2 = false;
    arg2 = &temp2; 
  }
  result = (int)((IVolumeController const *)arg1)->getMaxVolume(arg2);
  jresult = (jint)result; 
  {
    jboolean jvalue = (jboolean)temp2;
    jenv->SetBooleanArrayRegion(jarg2, 0, 1, &jvalue);
  }
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_IVolumeController_1setCurrentVolume(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  IVolumeController *arg1 = (IVolumeController *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IVolumeController **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setCurrentVolume(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_IVolumeController_1getMute(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  IVolumeController *arg1 = (IVolumeController *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IVolumeController **)&jarg1; 
  result = (bool)(arg1)->getMute();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_IVolumeController_1setMute(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  IVolumeController *arg1 = (IVolumeController *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IVolumeController **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setMute(arg2);
}


SWIGEXPORT jstring JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_IVolumeController_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  IVolumeController *arg1 = (IVolumeController *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IVolumeController **)&jarg1; 
  result = (arg1)->getName();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_IVolumeController_1hasMute(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  IVolumeController *arg1 = (IVolumeController *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IVolumeController **)&jarg1; 
  result = (bool)((IVolumeController const *)arg1)->hasMute();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_IVolumeController_1hasVolume(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  IVolumeController *arg1 = (IVolumeController *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IVolumeController **)&jarg1; 
  result = (bool)((IVolumeController const *)arg1)->hasVolume();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_IVolumeController_1getID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  IVolumeController *arg1 = (IVolumeController *) 0 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IVolumeController **)&jarg1; 
  result = (short)((IVolumeController const *)arg1)->getID();
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_IVolumeController_1getLastVolumeSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  IVolumeController *arg1 = (IVolumeController *) 0 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IVolumeController **)&jarg1; 
  result = (short)((IVolumeController const *)arg1)->getLastVolumeSet();
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_delete_1IVolumeController(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  IVolumeController *arg1 = (IVolumeController *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(IVolumeController **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_USBSelectorUnit_1selectInput(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  USBSelectorUnit *arg1 = (USBSelectorUnit *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(USBSelectorUnit **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->selectInput(arg2);
}


SWIGEXPORT jint JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_USBSelectorUnit_1getNumberOfInputs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  USBSelectorUnit *arg1 = (USBSelectorUnit *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(USBSelectorUnit **)&jarg1; 
  result = (int)((USBSelectorUnit const *)arg1)->getNumberOfInputs();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_USBSelectorUnit_1getInputNr(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  USBSelectorUnit *arg1 = (USBSelectorUnit *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(USBSelectorUnit **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((USBSelectorUnit const *)arg1)->getInputNr(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_delete_1USBSelectorUnit(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  USBSelectorUnit *arg1 = (USBSelectorUnit *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(USBSelectorUnit **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_USBAudioManager_1getOpenDeviceErrorMessage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  USBAudioManager *arg1 = (USBAudioManager *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(USBAudioManager **)&jarg1; 
  result = ((USBAudioManager const *)arg1)->getOpenDeviceErrorMessage();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_USBAudioManager_1isAudioDevicePresentForLinux(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  USBAudioManager *arg1 = (USBAudioManager *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(USBAudioManager **)&jarg1; 
  result = (bool)((USBAudioManager const *)arg1)->isAudioDevicePresentForLinux();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_USBAudioManager_1isMidiOutputDevicePresent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  USBAudioManager *arg1 = (USBAudioManager *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(USBAudioManager **)&jarg1; 
  result = (bool)((USBAudioManager const *)arg1)->isMidiOutputDevicePresent();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_USBAudioManager_1getCurrentAudioDeviceAsAudioDevice(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  USBAudioManager *arg1 = (USBAudioManager *) 0 ;
  AudioDevice *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(USBAudioManager **)&jarg1; 
  result = (AudioDevice *)((USBAudioManager const *)arg1)->getCurrentAudioDeviceAsAudioDevice();
  *(AudioDevice **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_USBAudioManager_1isAudioDevicePresent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  USBAudioManager *arg1 = (USBAudioManager *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(USBAudioManager **)&jarg1; 
  result = (bool)((USBAudioManager const *)arg1)->isAudioDevicePresent();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_USBAudioManager_1isMidiDevicePresent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  USBAudioManager *arg1 = (USBAudioManager *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(USBAudioManager **)&jarg1; 
  result = (bool)((USBAudioManager const *)arg1)->isMidiDevicePresent();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_USBAudioManager_1setFirmwareDirectory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  USBAudioManager *arg1 = (USBAudioManager *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(USBAudioManager **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setFirmwareDirectory(arg2);
}


SWIGEXPORT void JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_USBAudioManager_1doThreadMagic(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  USBAudioManager *arg1 = (USBAudioManager *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(USBAudioManager **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->doThreadMagic(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_USBAudioManager_1isUltraLowLatency(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  USBAudioManager *arg1 = (USBAudioManager *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(USBAudioManager **)&jarg1; 
  result = (bool)((USBAudioManager const *)arg1)->isUltraLowLatency();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_delete_1USBAudioManager(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  USBAudioManager *arg1 = (USBAudioManager *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(USBAudioManager **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_new_1IVolumeControllerVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< IVolumeController * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< IVolumeController * > *)new std::vector< IVolumeController * >();
  *(std::vector< IVolumeController * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_new_1IVolumeControllerVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< IVolumeController * >::size_type arg1 ;
  std::vector< IVolumeController * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< IVolumeController * >::size_type)jarg1; 
  result = (std::vector< IVolumeController * > *)new std::vector< IVolumeController * >(arg1);
  *(std::vector< IVolumeController * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_IVolumeControllerVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< IVolumeController * > *arg1 = (std::vector< IVolumeController * > *) 0 ;
  std::vector< IVolumeController * >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< IVolumeController * > **)&jarg1; 
  result = ((std::vector< IVolumeController * > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_IVolumeControllerVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< IVolumeController * > *arg1 = (std::vector< IVolumeController * > *) 0 ;
  std::vector< IVolumeController * >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< IVolumeController * > **)&jarg1; 
  result = ((std::vector< IVolumeController * > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_IVolumeControllerVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< IVolumeController * > *arg1 = (std::vector< IVolumeController * > *) 0 ;
  std::vector< IVolumeController * >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< IVolumeController * > **)&jarg1; 
  arg2 = (std::vector< IVolumeController * >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_IVolumeControllerVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< IVolumeController * > *arg1 = (std::vector< IVolumeController * > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< IVolumeController * > **)&jarg1; 
  result = (bool)((std::vector< IVolumeController * > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_IVolumeControllerVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< IVolumeController * > *arg1 = (std::vector< IVolumeController * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< IVolumeController * > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_IVolumeControllerVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< IVolumeController * > *arg1 = (std::vector< IVolumeController * > *) 0 ;
  std::vector< IVolumeController * >::value_type *arg2 = 0 ;
  std::vector< IVolumeController * >::value_type temp2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< IVolumeController * > **)&jarg1; 
  temp2 = *(std::vector< IVolumeController * >::value_type *)&jarg2;
  arg2 = (std::vector< IVolumeController * >::value_type *)&temp2; 
  (arg1)->push_back((std::vector< IVolumeController * >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_IVolumeControllerVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< IVolumeController * > *arg1 = (std::vector< IVolumeController * > *) 0 ;
  int arg2 ;
  std::vector< IVolumeController * >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< IVolumeController * > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< IVolumeController * >::value_type *) &std_vector_Sl_IVolumeController_Sm__Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< IVolumeController * >::value_type *)&jresult = *result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_IVolumeControllerVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< IVolumeController * > *arg1 = (std::vector< IVolumeController * > *) 0 ;
  int arg2 ;
  std::vector< IVolumeController * >::value_type *arg3 = 0 ;
  std::vector< IVolumeController * >::value_type temp3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< IVolumeController * > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = *(std::vector< IVolumeController * >::value_type *)&jarg3;
  arg3 = (std::vector< IVolumeController * >::value_type *)&temp3; 
  try {
    std_vector_Sl_IVolumeController_Sm__Sg__set(arg1,arg2,(IVolumeController *const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_delete_1IVolumeControllerVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< IVolumeController * > *arg1 = (std::vector< IVolumeController * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< IVolumeController * > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_new_1USBSelectorUnitVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< USBSelectorUnit * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< USBSelectorUnit * > *)new std::vector< USBSelectorUnit * >();
  *(std::vector< USBSelectorUnit * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_new_1USBSelectorUnitVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< USBSelectorUnit * >::size_type arg1 ;
  std::vector< USBSelectorUnit * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< USBSelectorUnit * >::size_type)jarg1; 
  result = (std::vector< USBSelectorUnit * > *)new std::vector< USBSelectorUnit * >(arg1);
  *(std::vector< USBSelectorUnit * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_USBSelectorUnitVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< USBSelectorUnit * > *arg1 = (std::vector< USBSelectorUnit * > *) 0 ;
  std::vector< USBSelectorUnit * >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< USBSelectorUnit * > **)&jarg1; 
  result = ((std::vector< USBSelectorUnit * > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_USBSelectorUnitVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< USBSelectorUnit * > *arg1 = (std::vector< USBSelectorUnit * > *) 0 ;
  std::vector< USBSelectorUnit * >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< USBSelectorUnit * > **)&jarg1; 
  result = ((std::vector< USBSelectorUnit * > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_USBSelectorUnitVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< USBSelectorUnit * > *arg1 = (std::vector< USBSelectorUnit * > *) 0 ;
  std::vector< USBSelectorUnit * >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< USBSelectorUnit * > **)&jarg1; 
  arg2 = (std::vector< USBSelectorUnit * >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_USBSelectorUnitVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< USBSelectorUnit * > *arg1 = (std::vector< USBSelectorUnit * > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< USBSelectorUnit * > **)&jarg1; 
  result = (bool)((std::vector< USBSelectorUnit * > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_USBSelectorUnitVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< USBSelectorUnit * > *arg1 = (std::vector< USBSelectorUnit * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< USBSelectorUnit * > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_USBSelectorUnitVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< USBSelectorUnit * > *arg1 = (std::vector< USBSelectorUnit * > *) 0 ;
  std::vector< USBSelectorUnit * >::value_type *arg2 = 0 ;
  std::vector< USBSelectorUnit * >::value_type temp2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< USBSelectorUnit * > **)&jarg1; 
  temp2 = *(std::vector< USBSelectorUnit * >::value_type *)&jarg2;
  arg2 = (std::vector< USBSelectorUnit * >::value_type *)&temp2; 
  (arg1)->push_back((std::vector< USBSelectorUnit * >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_USBSelectorUnitVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< USBSelectorUnit * > *arg1 = (std::vector< USBSelectorUnit * > *) 0 ;
  int arg2 ;
  std::vector< USBSelectorUnit * >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< USBSelectorUnit * > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< USBSelectorUnit * >::value_type *) &std_vector_Sl_USBSelectorUnit_Sm__Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< USBSelectorUnit * >::value_type *)&jresult = *result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_USBSelectorUnitVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< USBSelectorUnit * > *arg1 = (std::vector< USBSelectorUnit * > *) 0 ;
  int arg2 ;
  std::vector< USBSelectorUnit * >::value_type *arg3 = 0 ;
  std::vector< USBSelectorUnit * >::value_type temp3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< USBSelectorUnit * > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = *(std::vector< USBSelectorUnit * >::value_type *)&jarg3;
  arg3 = (std::vector< USBSelectorUnit * >::value_type *)&temp3; 
  try {
    std_vector_Sl_USBSelectorUnit_Sm__Sg__set(arg1,arg2,(USBSelectorUnit *const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_delete_1USBSelectorUnitVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< USBSelectorUnit * > *arg1 = (std::vector< USBSelectorUnit * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< USBSelectorUnit * > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_USBAudioDevice_1hasAudioInput(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  USBAudioDevice *arg1 = (USBAudioDevice *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(USBAudioDevice **)&jarg1; 
  result = (bool)((USBAudioDevice const *)arg1)->hasAudioInput();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_USBAudioDevice_1hasAudioOutput(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  USBAudioDevice *arg1 = (USBAudioDevice *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(USBAudioDevice **)&jarg1; 
  result = (bool)((USBAudioDevice const *)arg1)->hasAudioOutput();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_USBAudioDevice_1hasMIDIInput(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  USBAudioDevice *arg1 = (USBAudioDevice *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(USBAudioDevice **)&jarg1; 
  result = (bool)((USBAudioDevice const *)arg1)->hasMIDIInput();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_USBAudioDevice_1hasMIDIOutput(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  USBAudioDevice *arg1 = (USBAudioDevice *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(USBAudioDevice **)&jarg1; 
  result = (bool)((USBAudioDevice const *)arg1)->hasMIDIOutput();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_USBAudioDevice_1isMIDIOnly(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  USBAudioDevice *arg1 = (USBAudioDevice *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(USBAudioDevice **)&jarg1; 
  result = (bool)((USBAudioDevice const *)arg1)->isMIDIOnly();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_USBAudioDevice_1startAllTransfers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jboolean jarg3, jboolean jarg4) {
  jboolean jresult = 0 ;
  USBAudioDevice *arg1 = (USBAudioDevice *) 0 ;
  bool arg2 ;
  bool arg3 ;
  bool arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(USBAudioDevice **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  result = (bool)(arg1)->startAllTransfers(arg2,arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_USBAudioDevice_1stopAllTransfers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  USBAudioDevice *arg1 = (USBAudioDevice *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(USBAudioDevice **)&jarg1; 
  result = (int)(arg1)->stopAllTransfers();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_USBAudioDevice_1getAllVolumeControllers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  USBAudioDevice *arg1 = (USBAudioDevice *) 0 ;
  std::vector< IVolumeController * > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(USBAudioDevice **)&jarg1; 
  result = ((USBAudioDevice const *)arg1)->getAllVolumeControllers();
  *(std::vector< IVolumeController * > **)&jresult = new std::vector< IVolumeController * >((const std::vector< IVolumeController * > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_USBAudioDevice_1getAllSelectorUnits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  USBAudioDevice *arg1 = (USBAudioDevice *) 0 ;
  std::vector< USBSelectorUnit * > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(USBAudioDevice **)&jarg1; 
  result = ((USBAudioDevice const *)arg1)->getAllSelectorUnits();
  *(std::vector< USBSelectorUnit * > **)&jresult = new std::vector< USBSelectorUnit * >((const std::vector< USBSelectorUnit * > &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_USBAudioDevice_1getVendorID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  USBAudioDevice *arg1 = (USBAudioDevice *) 0 ;
  unsigned short result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(USBAudioDevice **)&jarg1; 
  result = (unsigned short)(arg1)->getVendorID();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_USBAudioDevice_1getProductID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  USBAudioDevice *arg1 = (USBAudioDevice *) 0 ;
  unsigned short result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(USBAudioDevice **)&jarg1; 
  result = (unsigned short)(arg1)->getProductID();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_USBAudioDevice_1getManufacturerString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  USBAudioDevice *arg1 = (USBAudioDevice *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(USBAudioDevice **)&jarg1; 
  result = (arg1)->getManufacturerString();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_USBAudioDevice_1getProductString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  USBAudioDevice *arg1 = (USBAudioDevice *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(USBAudioDevice **)&jarg1; 
  result = (arg1)->getProductString();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_USBAudioDevice_1getSerialNumberString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  USBAudioDevice *arg1 = (USBAudioDevice *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(USBAudioDevice **)&jarg1; 
  result = (arg1)->getSerialNumberString();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_delete_1USBAudioDevice(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  USBAudioDevice *arg1 = (USBAudioDevice *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(USBAudioDevice **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_new_1USBControl(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  USBControl *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (USBControl *)new USBControl();
  *(USBControl **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_delete_1USBControl(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  USBControl *arg1 = (USBControl *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(USBControl **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_USBControl_1initUSB(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jboolean jresult = 0 ;
  USBControl *arg1 = (USBControl *) 0 ;
  bool arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(USBControl **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)(arg1)->initUSB(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_USBControl_1cleanUp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  USBControl *arg1 = (USBControl *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(USBControl **)&jarg1; 
  (arg1)->cleanUp();
}


SWIGEXPORT void JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_USBControl_1restartUSBAudioManager(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  USBControl *arg1 = (USBControl *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(USBControl **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->restartUSBAudioManager(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_USBControl_1initUSBDevice(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4) {
  jboolean jresult = 0 ;
  USBControl *arg1 = (USBControl *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(USBControl **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (bool)(arg1)->initUSBDevice(arg2,arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_USBControl_1initUSBDeviceByName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3, jint jarg4, jint jarg5, jbyteArray jarg6, jint jarg7) {
  jboolean jresult = 0 ;
  USBControl *arg1 = (USBControl *) 0 ;
  int arg2 ;
  std::string arg3 ;
  int arg4 ;
  int arg5 ;
  jbyteArray arg6 ;
  int arg7 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(USBControl **)&jarg1; 
  arg2 = (int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = jarg6; 
  arg7 = (int)jarg7; 
  result = (bool)(arg1)->initUSBDeviceByName(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_USBControl_1getOpenDeviceErrorMessage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  USBControl *arg1 = (USBControl *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(USBControl **)&jarg1; 
  result = (arg1)->getOpenDeviceErrorMessage();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_USBControl_1isAudioDevicePresentForLinux(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  USBControl *arg1 = (USBControl *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(USBControl **)&jarg1; 
  result = (bool)(arg1)->isAudioDevicePresentForLinux();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_USBControl_1startAudioTransfers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jboolean jarg3, jint jarg4, jboolean jarg5, jint jarg6, jint jarg7) {
  jboolean jresult = 0 ;
  USBControl *arg1 = (USBControl *) 0 ;
  bool arg2 ;
  bool arg3 ;
  int arg4 ;
  bool arg5 ;
  int arg6 ;
  int arg7 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(USBControl **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  result = (bool)(arg1)->startAudioTransfers(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_USBControl_1stopAudioTransfers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  USBControl *arg1 = (USBControl *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(USBControl **)&jarg1; 
  (arg1)->stopAudioTransfers();
}


SWIGEXPORT jboolean JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_USBControl_1startMIDIInputTransfers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  USBControl *arg1 = (USBControl *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(USBControl **)&jarg1; 
  result = (bool)(arg1)->startMIDIInputTransfers();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_USBControl_1stopMIDIInputTransfers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  USBControl *arg1 = (USBControl *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(USBControl **)&jarg1; 
  (arg1)->stopMIDIInputTransfers();
}


SWIGEXPORT void JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_USBControl_1setUSBSampleRate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  USBControl *arg1 = (USBControl *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(USBControl **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setUSBSampleRate(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_USBControl_1startOpenSLES(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jboolean jarg3, jint jarg4, jint jarg5, jint jarg6) {
  jboolean jresult = 0 ;
  USBControl *arg1 = (USBControl *) 0 ;
  bool arg2 ;
  bool arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(USBControl **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  result = (bool)(arg1)->startOpenSLES(arg2,arg3,arg4,arg5,arg6);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_USBControl_1stopOpenSLES(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  USBControl *arg1 = (USBControl *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(USBControl **)&jarg1; 
  (arg1)->stopOpenSLES();
}


SWIGEXPORT void JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_USBControl_1setObjectToPassArrayTo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  USBControl *arg1 = (USBControl *) 0 ;
  jobject arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(USBControl **)&jarg1; 
  arg2 = jarg2; 
  (arg1)->setObjectToPassArrayTo(arg2);
}


SWIGEXPORT void JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_USBControl_1sendMidiMessage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4) {
  USBControl *arg1 = (USBControl *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(USBControl **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->sendMidiMessage(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_setLogFileName(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  std::string arg1 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  setLogFileName(arg1);
}


SWIGEXPORT jlong JNICALL Java_com_extreamsd_usbtester_USBTestNativeJNI_USBAudioDevice_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(AudioDevice **)&baseptr = *(USBAudioDevice **)&jarg1;
    return baseptr;
}

#ifdef __cplusplus
}
#endif

