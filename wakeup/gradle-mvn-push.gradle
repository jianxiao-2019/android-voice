/*
 * Copyright 2013 Chris Banes
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */




apply plugin: 'maven'
//apply plugin: 'signing'

def getRepositoryUsername() {
    return hasProperty('NEXUS_USERNAME') ? NEXUS_USERNAME : ""
}

def getRepositoryPassword() {
    return hasProperty('NEXUS_PASSWORD') ? NEXUS_PASSWORD : ""
}



afterEvaluate { project ->
    uploadArchives {
        repositories {
            mavenDeployer {
//                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                pom.groupId = GROUP
                pom.artifactId = POM_ARTIFACT_ID
                pom.version = getVersionName(VERSION_NAME)
                pom.project {
                    name POM_NAME
                    packaging POM_PACKAGING
                    description POM_DESCRIPTION
                    url POM_URL

                    scm {
                        url POM_SCM_URL
                    }
                }

                //snapshotRepository(url: 'file://' + new File(System.getProperty('user.home'),'temp/snapshots').absolutePath) { }

                repository(url: 'http://192.168.100.71:8081/nexus/content/repositories/releases') {
                    authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
                }
                snapshotRepository(url:'http://192.168.100.71:8081/nexus/content/repositories/snapshots') {
                    authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
                }

            }
        }
    }

//    signing {
//        required { isReleaseBuild() && gradle.taskGraph.hasTask("uploadArchives") }
//        sign configurations.archives
//    }

    android.libraryVariants.all { variant ->
        def javadocTask = task("generate${variant.name.capitalize()}Javadoc", type: Javadoc) {
            description "Generates Javadoc for $variant.name."
            source = variant.javaCompile.source
            try {
                ext.androidJar = project.files(android.getBootClasspath().join(File.pathSeparator))
            } catch (Exception e) {
                ext.androidJar = project.files(android.plugin.getRuntimeJarList().join(File.pathSeparator))
            }
            classpath = files(variant.javaCompile.classpath.files) + files(ext.androidJar)
            exclude '**/R.java'
        }

        javadocTask.dependsOn variant.javaCompile

        def jarJavadocTask = task("jar${variant.name.capitalize()}Javadoc", type: Jar) {
            description "Generate Javadoc Jar for $variant.name"
            classifier = 'javadoc'
            from javadocTask.destinationDir
        }

        jarJavadocTask.dependsOn javadocTask
        artifacts.add('archives', jarJavadocTask)
    }

}
